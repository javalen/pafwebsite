import { useEffect, useState } from "react";
import useExceptions from "../../../data/exceptions";
import pb from "../../../api/pocketbase";

const clazz = "ExceptionDetails";
const people = [
  {
    name: "Lindsay Walton",
    title: "Front-end Developer",
    email: "lindsay.walton@example.com",
    role: "Member",
  },
  // More people...
];
export default function ExceptionDetails({ facility }) {
  const exceptionData = useExceptions();
  const [definedExcepts, setDefinedExcepts] = useState(); // exception definitions in the db
  const [facExceptions, setFacExceptions] = useState({ exceptions: [] }); // the user selected exceptions
  const [facExId, setFacExId] = useState();
  const [saveMode, setSaveMode] = useState("create");
  const [currentExceptions, setCurrentExceptions] = useState(); // Exceptions generated by the system already in the db
  const [groups, setGroups] = useState([]);
  const [allSelected, setAllSelected] = useState(false);
  const [dummy, setDummy] = useState("");

  const loadExceptions = async () => {
    try {
      // Get the list of exceptions for this facility
      const fe = await exceptionData.getFacilityExceptionList(facility.id);
      console.log(clazz, "fe", fe);
      if (typeof fe === "undefined") {
        setSaveMode("create");
      } else {
        setSaveMode("update");
        setFacExceptions(fe.checked_exceptions);
        setFacExId(fe.id);
      }

      // Get a list of the defined exceptions
      const de = await exceptionData.getDefinedExceptions();
      setDefinedExcepts(de);

      const exceptions = await exceptionData.getFacilityExceptions(facility.id);
      setCurrentExceptions(exceptions);
      groupExceptions(exceptions);
    } catch (error) {
      console.log(clazz, "Error loading exceptions");
    }
  };

  const handleSelectAll = () => {
    definedExcepts.forEach((de) => {
      if (!allSelected) {
        if (!hasException(de.code)) addException(de.code);
      } else {
        removeException(de.code);
      }
    });
    setAllSelected(!allSelected);
    groupExceptions(currentExceptions);
    //setDummy("" + Math.random());
  };

  const groupExceptions = async (list) => {
    let groups = [];

    list.forEach((item) => {
      if (hasException(item.code)) {
        const exObj = groups.filter((g) => g.name === item.type);
        exObj.length === 0
          ? groups.push({ name: item.type, exceptions: [item] })
          : exObj[0].exceptions?.push(item);
      }
    });
    console.log(clazz, "groups", groups);
    setGroups(groups);
  };

  const hasException = (exception) => {
    //console.log(clazz, "hasException", facExceptions);
    return facExceptions?.exceptions.includes(exception);
  };

  const buildExceptonJson = (e) => {
    console.log(clazz, "buildExceptionJson", e);
    hasException(e) ? removeException(e) : addException(e);
    groupExceptions(currentExceptions);
    setDummy("" + Math.random());
  };

  const addException = (exception) => {
    const eArray = facExceptions;
    console.log(clazz, "addException", eArray);
    eArray.exceptions.push(exception);
    console.log(clazz, "addException", eArray);
    setFacExceptions(eArray);
  };

  const onSave = async () => {
    try {
      const data = {
        facility_id: facility.id,
        checked_exceptions: JSON.stringify(facExceptions),
      };

      if (saveMode === "create") {
        const record = await pb.collection("facility_exceptions").create(data);
      } else {
        const record1 = await pb
          .collection("facility_exceptions")
          .update(facExId, data);
      }
    } catch (error) {
      console.log(clazz, "Error saving exceptions", error);
    }
  };

  const removeException = (exception) => {
    const eArray = facExceptions;
    const index = eArray.exceptions?.indexOf(exception);
    if (index > -1) {
      // only splice array when item is found
      eArray.exceptions?.splice(index, 1); // 2nd parameter means remove one item only
    }
    setAllSelected(false);
    setFacExceptions(eArray);
  };

  const load = async () => {
    await loadExceptions();
  };

  useEffect(() => {
    setFacExceptions({ exceptions: [] });
    setAllSelected(false);
    load();
  }, [facility]);

  return (
    <div class="m-2 space-y-2">
      <div className="grid grid-cols-4 mt-5">
        <div className="grid col-span-3">
          Select the exceptions that you want to apply to this facility, view
          the exceptions by group below and click the save button when done.
        </div>
        <div className="">
          <button
            type="button"
            className="inline-flex items-center rounded-md bg-pmp_primary px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-pmp_primary/40 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500"
            onClick={onSave}
          >
            Save
          </button>
        </div>
        <div className="grid col-span-4 bg-red justify-self-end">
          <span>Selet All</span>
          <input
            id="comments"
            aria-describedby="comments-description"
            name="comments"
            type="checkbox"
            checked={allSelected}
            onChange={handleSelectAll}
            className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"
          />
        </div>
      </div>

      <div
        class="group flex flex-col gap-2 rounded-lg bg-slate-50 p-5 text-white"
        tabindex="1"
      >
        <div class="flex cursor-pointer items-center justify-between">
          <span> Manage Exceptions for {facility.name} </span>
        </div>
        <fieldset className="border-b border-t border-gray-200">
          <legend className="sr-only">Notifications</legend>
          <div className="divide-y divide-gray-200">
            {definedExcepts?.map((exception) => (
              <>
                <div className="relative flex items-start pb-4 pt-3.5">
                  <div className="min-w-0 flex-1 text-sm leading-6">
                    <label
                      htmlFor="comments"
                      className="font-medium text-black"
                    >
                      {exception.name} - {exception.message}
                    </label>
                    <p id="comments-description" className="text-gray-500">
                      {exception.description}
                    </p>
                  </div>
                  <div className="ml-3 flex h-6 items-center">
                    <input
                      id="comments"
                      aria-describedby="comments-description"
                      name="comments"
                      type="checkbox"
                      checked={hasException(exception.name)}
                      onChange={() => buildExceptonJson(exception.name)}
                      className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"
                    />
                  </div>
                </div>
              </>
            ))}
          </div>
        </fieldset>
      </div>

      {groups.map((group, index) => (
        <div
          class="group flex flex-col gap-2 rounded-lg bg-black/20 p-5 text-black"
          tabindex={index + 2}
        >
          <div class="flex cursor-pointer items-center justify-between mb-5">
            <span>
              {" "}
              {group.name} - {group?.exceptions?.length}{" "}
            </span>
            <img
              src="https://upload.wikimedia.org/wikipedia/commons/9/96/Chevron-icon-drop-down-menu-WHITE.png"
              class="h-2 w-3 transition-all duration-500 group-focus:-rotate-180"
            />
          </div>
          <div class="overflow-y-scroll invisible h-auto max-h-0 items-center opacity-0 mb-5 transition-all group-focus:visible group-focus:max-h-screen group-focus:opacity-100 group-focus:duration-1000">
            <div className="px-4 sm:px-6 lg:px-8">
              <div className="mt-8 flow-root">
                <div className="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                  <div className="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                    <table className="min-w-full divide-y divide-gray-300">
                      <thead>
                        <tr>
                          <th
                            scope="col"
                            className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-0"
                          >
                            System Name
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Exception Name
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Message
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Created
                          </th>
                          <th
                            scope="col"
                            className="relative py-3.5 pl-3 pr-4 sm:pr-0"
                          >
                            <span className="sr-only">Edit</span>
                          </th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                        {group?.exceptions?.map((ex) => (
                          <tr key={ex.id}>
                            <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-0">
                              {ex.sys_name}
                            </td>
                            <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                              {ex.code}
                            </td>
                            <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                              {ex.message}
                            </td>
                            <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                              {ex.created}
                            </td>
                            <td className="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-0">
                              <a
                                href="#"
                                className="text-indigo-600 hover:text-indigo-900"
                              >
                                Resolve
                                <span className="sr-only">, {ex.id}</span>
                              </a>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}
